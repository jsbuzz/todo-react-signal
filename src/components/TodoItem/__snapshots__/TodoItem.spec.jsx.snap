// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/TodoItem WHEN todo is marked as NOT done should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TodoItem
    todo={
      Object {
        "done": false,
        "edited": false,
        "id": 191,
        "title": "test me!",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <CheckBox
          done={false}
          onChange={[Function]}
        />,
        <label
          className="todo-title"
        >
          test me!
        </label>,
        false,
        <button
          className="destroy"
          onClick={[Function]}
          type="button"
        />,
      ],
      "className": "todo",
      "onDoubleClick": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "done": false,
          "onChange": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "test me!",
          "className": "todo-title",
        },
        "ref": null,
        "rendered": "test me!",
        "type": "label",
      },
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "destroy",
          "onClick": [Function],
          "type": "button",
        },
        "ref": null,
        "rendered": null,
        "type": "button",
      },
    ],
    "type": "li",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <CheckBox
            done={false}
            onChange={[Function]}
          />,
          <label
            className="todo-title"
          >
            test me!
          </label>,
          false,
          <button
            className="destroy"
            onClick={[Function]}
            type="button"
          />,
        ],
        "className": "todo",
        "onDoubleClick": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "done": false,
            "onChange": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "test me!",
            "className": "todo-title",
          },
          "ref": null,
          "rendered": "test me!",
          "type": "label",
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "destroy",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
      ],
      "type": "li",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`components/TodoItem WHEN todo is marked as done should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TodoItem
    todo={
      Object {
        "done": true,
        "edited": false,
        "id": 191,
        "title": "test me!",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <CheckBox
          done={true}
          onChange={[Function]}
        />,
        <label
          className="todo-title"
        >
          test me!
        </label>,
        false,
        <button
          className="destroy"
          onClick={[Function]}
          type="button"
        />,
      ],
      "className": "todo completed",
      "onDoubleClick": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "done": true,
          "onChange": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "test me!",
          "className": "todo-title",
        },
        "ref": null,
        "rendered": "test me!",
        "type": "label",
      },
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "destroy",
          "onClick": [Function],
          "type": "button",
        },
        "ref": null,
        "rendered": null,
        "type": "button",
      },
    ],
    "type": "li",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <CheckBox
            done={true}
            onChange={[Function]}
          />,
          <label
            className="todo-title"
          >
            test me!
          </label>,
          false,
          <button
            className="destroy"
            onClick={[Function]}
            type="button"
          />,
        ],
        "className": "todo completed",
        "onDoubleClick": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "done": true,
            "onChange": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "test me!",
            "className": "todo-title",
          },
          "ref": null,
          "rendered": "test me!",
          "type": "label",
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "destroy",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
      ],
      "type": "li",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
